name: Claude Code 並列開発ワークフロー

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue番号'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # タスク分割（チェックリスト抽出）
  task_assignment:
    runs-on: ubuntu-latest
    outputs:
      implementation_tasks: ${{ steps.extract.outputs.implementation_tasks }}
      review_tasks: ${{ steps.extract.outputs.review_tasks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Issue Body
        id: get_issue
        uses: actions/github-script@v7
        with:
          script: |
            ISSUE_NUM="${{ github.event.inputs.issue_number || github.event.issue.number }}"
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(ISSUE_NUM)
            });
            core.setOutput('body', issue.data.body);
      - name: Extract implementation tasks from 機能要件
        id: extract
        run: |
          cat > issue_body.md <<EOF
          ${{ steps.get_issue.outputs.body }}
          EOF
          echo "===== issue_body.md ====="
          cat issue_body.md
          echo "===== 機能要件抽出 ====="
          awk '/^#+ 機能要件/{flag=1; next} /^#+ /{flag=0} flag && /^-/' issue_body.md | sed 's/^- //' > impl_tasks.txt
          cat impl_tasks.txt
          jq -R -s -c 'split("\n")[:-1]' impl_tasks.txt > impl_tasks.json
          echo "===== impl_tasks.json ====="
          cat impl_tasks.json
          echo "===== GITHUB_OUTPUT ====="
          echo "implementation_tasks=$(cat impl_tasks.json | jq -c .)" >> $GITHUB_OUTPUT
          echo "implementation_tasks=$(cat impl_tasks.json | jq -c .)"

      - name: Extract review tasks from 受け入れ基準
        run: |
          awk '/^#+ 受け入れ基準/{flag=1; next} /^## /{flag=0} flag && /^-/' issue_body.md | sed 's/^- //' > review_tasks.txt
          jq -R -s -c 'split("\n")[:-1]' review_tasks.txt > review_tasks.json
          echo "review_tasks=$(cat review_tasks.json)" >> $GITHUB_OUTPUT

  # Claude Code A: 実装
  claude_implementation:
    runs-on: ubuntu-latest
    needs: task_assignment
    strategy:
      matrix:
        task: ${{ fromJson(needs.task_assignment.outputs.implementation_tasks) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: 実装実行
        run: |
          # デバッグ: matrix.taskの内容を確認
          echo "matrix.task: '${{ matrix.task }}'"
          
          # タスク内容からIDを生成
          TASK_ID=$(echo "${{ matrix.task }}" | head -c 20 | tr ' ' '_' | tr -d '\n')
          echo "TASK_ID: '$TASK_ID'"
          echo "TASK_ID length: ${#TASK_ID}"
          
          # 新しいブランチを作成
          git checkout -b claude-impl-$TASK_ID
          git worktree add ../claude-impl-$TASK_ID claude-impl-$TASK_ID
          cd ../claude-impl-$TASK_ID
          
      - name: Setup Claude Code
        run: |
          npm install -g @anthropic-ai/claude-code
          claude config set mcp.github.enabled true
          claude config set mcp.github.token $GITHUB_TOKEN
          claude config set mcp.github.repo ${{ github.repository }}
          
      - name: 実装実行
        run: |
          cd ../claude-impl-$TASK_ID
          claude "${{ matrix.task }}"
          
      - name: PR作成
        run: |
          cd ../claude-impl-$TASK_ID
          git push origin claude-impl-$TASK_ID
          claude "実装完了。PR作成してください。タイトル: ${{ matrix.task }}"

  # Claude Code B: レビュー（実装完了後）
  claude_review:
    runs-on: ubuntu-latest
    needs: [task_assignment, claude_implementation]
    strategy:
      matrix:
        task: ${{ fromJson(needs.task_assignment.outputs.review_tasks) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: レビュー実行
        run: |
          # タスク内容からIDを生成
          TASK_ID=$(echo "${{ matrix.task }}" | head -c 20 | tr ' ' '_' | tr -d '\n')
          echo "TASK_ID: '$TASK_ID'"
          # 新しいブランチを作成
          git checkout -b claude-review-$TASK_ID
          git worktree add ../claude-review-$TASK_ID claude-review-$TASK_ID
          cd ../claude-review-$TASK_ID
          
      - name: Setup Claude Code
        run: |
          npm install -g @anthropic-ai/claude-code
          claude config set mcp.github.enabled true
          claude config set mcp.github.token $GITHUB_TOKEN
          claude config set mcp.github.repo ${{ github.repository }}
          
      - name: ローカルレビュー実行
        run: |
          cd ../claude-review-$TASK_ID
          claude "最新のPRを確認し、客観的なコードレビューを実行してください"
          
      - name: PRレビューコメント
        run: |
          claude "レビュー結果をPRにコメントとして追加してください"

  # エンジニアによる最終チェック
  engineer_final_review:
    runs-on: ubuntu-latest
    needs: [claude_implementation, claude_review]
    steps:
      - name: 最終レビュー通知
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔍 Claude Codeによる実装とレビューが完了しました。エンジニアによる最終確認をお願いします。\n\n- [ ] 実装内容の確認\n- [ ] テストの実行\n- [ ] マージ可否の判断'
            });

  # 自動マージ（承認後）
  auto_merge:
    runs-on: ubuntu-latest
    needs: engineer_final_review
    if: contains(github.event.label.name, 'auto-merge-approved')
    steps:
      - name: Auto Merge
        uses: pascalgn/merge-action@v0.15.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash